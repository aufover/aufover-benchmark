single-c
========
simplified test-suite using single C file for each test


Tree layout of this directory
-----------------------------
./CMakeLists.txt            CMake configuration file for this test-suite
./sync.sh                   script for syncing of expected results
./*/                        directories with test groups
./*/*/                      directories with individual tests
./*/*/*.c                   C file given as input to the tools (1 for each test)
./*/*/output-exp@${tool}    expected csgrep output for tool ${tool}

./**/output-convert.sh@${tool}
                            script that converts output of ${tool} for csgrep

./**/output-diff.sh@${tool} script comparing expected/actual output of ${tool}
./**/args-prefix@${tool}    arguments prefix given to tool ${tool}
./**/args-suffix@${tool}    arguments suffix given to tool ${tool}
./**/test-props@${tool}     test properties for [exec], for example TIMEOUT

NOTE: File starting with ./**/ can be specified for individual tests,
      for a group of tests, or for the whole tests-suite.


Tree layout of the corresponding working directory: ${WORKDIR}/single-c
-----------------------------------------------------------------------
./Makefile                  generated Makefile for the single-c test-suite
./${group}/${test}/${tool}/ working directories for test/tool combinations,
each of them contains:
    .../*.c                 symlink to C file used as input (1 for each test)
    .../cmd-tool.sh         generated shell script used to run the tool
    .../cmd-convert.sh      symlink to output format converter
    .../output-raw.txt      raw output captured from execution of cmd-tool.sh
    .../output-con.txt      output converted by cmd-convert.sh
    .../output-uni.txt      output further converted by csgrep
    .../output-exp.txt      symlink to expected output for the test/tool pair


What happens at configure time?
-------------------------------
- create the ${WORKDIR}/single-c/${group}/${test}/${tool} dir tree structure
- in each leaf directory of ${WORKDIR}/single-c create the following symlinks:
    *.c             -> ${TESTDIR}/single-c/${group}/${test}/*.c

    cmd-convert.sh  -> ${TESTDIR}/single-c/${group}/${test}/output-convert.sh@${tool}
                    -> ${TESTDIR}/single-c/${group}/output-convert.sh@${tool}
                    -> ${TESTDIR}/single-c/output-convert.sh@${tool}
                    -> ${TESTDIR}/single-c/output-convert.sh

    cmd-diff.sh     -> ${TESTDIR}/single-c/${group}/${test}/output-diff.sh@${tool}
                    -> ${TESTDIR}/single-c/${group}/output-diff.sh@${tool}
                    -> ${TESTDIR}/single-c/output-diff.sh@${tool}
                    -> ${TESTDIR}/single-c/output-diff.sh

    output-exp.txt  -> ${TESTDIR}/single-c/${group}/${test}/output-exp@${tool}

- in each leaf directory generate the cmd-tool.sh (pseudo) script as follows:
    {
        ${TOOL_EXEC_${tool}}        \
            $(<args-prefix@${tool}) \
            ${c_file}               \
            $(<args-suffix@${tool})
    } > output-raw.txt

- for each group/test/tool combination that provides output-exp@${tool}
  generate the following CMake tests:
    single-c/${group}/${test}@${tool}[exec]
    single-c/${group}/${test}@${tool}[conv]
    single-c/${group}/${test}@${tool}[csgrep]
    single-c/${group}/${test}@${tool}[diff]

    ... where:

     [exec]  executes the corresponding cmd-tool.sh script
     [conv]  executes `cmd-convert.sh <./output-raw.txt >./output-con.txt`
    [csgrep] executes `csgrep         <./output-con.txt >./output-uni.txt`
     [diff]  executes `cmd-diff.sh     ./output-exp.txt  ./output-uni.txt`

    ... chained by dependencies as follows:

        [diff] <- [csgrep] <- [conv] <- [exec]

- tag each CMake test by label ${tool}
- set custom properties for [exec] from test-props@${tool} if such a file exists


How to update expected output of existing tests?
------------------------------------------------
- run the following command:
    $ SYNC_EXISTING_ONLY=1 ./sync.sh [CTEST_OPTS]

- sync.sh takes custom ctest options, which is useful (not only) for filtering:
    $ SYNC_EXISTING_ONLY=1 ./sync.sh -L cbmc --progress

- WARNING: all strings passed to sync.sh in [CTEST_OPTS] must be either escaped
  or double quoted:
    $ SYNC_EXISTING_ONLY=1 ./sync.sh -L 'cbmc\|divine'
    $ SYNC_EXISTING_ONLY=1 ./sync.sh -L '"cbmc|divine"'

- sync.sh uses a separate working directory for syncing:
    ../../workdir-for-sync

- once sync.sh succeeds, verify the changes in output-exp@${tool} files:
    $ git diff */*/output-exp@*

- if the changes make sense, commit them with explaining commit message:
    $ git commit */*/output-exp@*

- verify that all tests succeed:
    $ make check -C ../..


How to import new tests into the single-c test-suite?
-----------------------------------------------------
- create a new directory for the test:
    $ mkdir -p ./my_group/my_test

- copy a self-contained C source file to the directory and stage it for commit:
    $ cp /path/to/my/test/code.c ./my_group/my_test/
    $ git add ./my_group/my_test/code.c

- if needed, create/update configuration files for the test group:
    ./my_group/args-prefix@${tool}
    ./my_group/args-suffix@${tool}
    ./my_group/test-props@${tool}
    ./my_group/output-convert.sh@${tool}
    ./my_group/output-diff.sh@${tool}

- if needed, create configuration files to override configuration for the test:
    ./my_group/my_test/args-prefix@${tool}
    ./my_group/my_test/args-suffix@${tool}
    ./my_group/my_test/test-props@${tool}
    ./my_group/my_test/output-convert.sh@${tool}
    ./my_group/my_test/output-diff.sh@${tool}

- run sync.sh script to capture initial output-exp@${tool} content:
    ./sync.sh -R '^single-c/my_group/my_test@'

- optionally you might want to exclude some tools from syncing:
    ./sync.sh -R '^single-c/my_group/my_test@' -LE 'cbmc\|divine'

- if anything fails unexpectedly, inspect the following (disposable) directory:
    ../../workdir-for-sync/single-c/my_group/my_test/

- once sync.sh succeeds, verify the initial output-exp@${tool} content:
    ./my_group/my_test/output-exp@*

- if any output-exp@${tool} content is incorrect, remove the file(s) and create
  ./my_group/my_test/README* file to record the information why the output is
  incorrect, optionally with reference to a bug tracker

- commit all related changes to git:
    $ git add ./my_group/my_test
    $ git commit -a

- verify that the imported test works as expected:
    $ CTEST_OPTS="-R '^single-c/my_group/my_test@'" make check -C ../..

- verify that it did not break any other tests:
    $ make check -C ../..
