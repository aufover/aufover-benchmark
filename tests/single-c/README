single-c
========
simplified test-suite using single C file for each test


Tree layout of this directory
-----------------------------
./CMakeLists.txt            CMake configuration file for this test-suite
./sync.sh                   script for syncing of expected results (dangerous)
./*/                        directories with test groups
./*/*/                      directories with individual tests
./*/*/*.c                   C file given as input to the tools (1 for each test)
./*/*/output-exp@${tool}    expected csgrep output for tool ${tool}

./**/output-convert.sh@${tool}
                            script that converts output of ${tool} for csgrep

./**/args-prefix@${tool}    arguments prefix given to tool ${tool}
./**/args-suffix@${tool}    arguments suffix given to tool ${tool}
./**/test-props@${tool}     test properties for [exec], for example TIMEOUT

NOTE: File starting with ./**/ can be currently specified, either for individual
      tests or for a group of tests.  In future, this may be extended also for
      files shared by the whole test-suite (placed directly in this directory).


Tree layout of the corresponding working directory: ${WORKDIR}/single-c
-----------------------------------------------------------------------
./Makefile                  generated Makefile for the single-c test-suite
./${group}/${test}/${tool}/ working directories for test/tool combinations,
each of them contains:
    .../*.c                 symlink to C file used as input (1 for each test)
    .../cmd-tool.sh         generated shell script used to run the tool
    .../cmd-convert         symlink to output format converter
    .../output-raw.txt      raw output captured from execution of cmd-tool.sh
    .../output-con.txt      output converted by cmd-convert.sh
    .../output-uni.txt      output further converted by csgrep
    .../output-exp.txt      symlink to expected output for the test/tool pair


What happens at configure time?
-------------------------------
- create the ${WORKDIR}/single-c/${group}/${test}/${tool} dir tree structure
- in each leaf directory of ${WORKDIR}/single-c create the following symlinks:
    *.c             -> ${TESTDIR}/single-c/${group}/${test}/*.c

    cmd-convert     -> /bin/cat ... or:
                    -> ${TESTDIR}/single-c/${group}/output-convert.sh@${tool} ... or:
                    -> ${TESTDIR}/single-c/${group}/${test}/output-convert.sh@${tool}

    output-exp.txt  -> ${TESTDIR}/single-c/${group}/${test}/output-exp@${tool}


- in each leaf directory generate the cmd-tool.sh (pseudo) script as follows:
    {
        ${TOOL_EXEC_${tool}}        \
            $(<args-prefix@${tool}) \
            ${c_file}               \
            $(<args-suffix@${tool})
    } > output-raw.txt

- for each group/test/tool combination that provides output-exp@${tool}
  generate the following CMake tests:
    single-c/${group}/${test}@${tool}[exec]
    single-c/${group}/${test}@${tool}[conv]
    single-c/${group}/${test}@${tool}[csgrep]
    single-c/${group}/${test}@${tool}[diff]

    ... where:

     [exec]  executes the corresponding cmd-tool.sh script
     [conv]  executes `cmd-convert <./output-raw.txt >./output-con.txt`
    [csgrep] executes `csgrep      <./output-con.txt >./output-uni.txt`
     [diff]  executes `diff -up     ./output-exp.txt  ./output-uni.txt`

    ... chained by dependencies as follows:

        [diff] -> [csgrep] -> [conv] -> [exec]

- set custom properties for [exec] from test-props@${tool} if such a file exists
